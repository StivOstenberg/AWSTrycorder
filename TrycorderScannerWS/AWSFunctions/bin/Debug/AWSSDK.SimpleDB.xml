<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AWSSDK.SimpleDB</name>
    </assembly>
    <members>
        <member name="T:Amazon.SimpleDB.Util.AmazonSimpleDBUtil">
            <summary>
            Provides a collection of static functions to:
            1. Convert various values into strings that may be compared lexicographically
            2. Decode a Base64 Encoded string
            3. Decode an Amazon SimpleDB Attribute's properties
            4. Decode an Amazon SimpleDB Item's properties and constituent Item(s)
            </summary>
        </member>
        <member name="F:Amazon.SimpleDB.Util.AmazonSimpleDBUtil.dateFormat">
            <summary>
            Date format String, e.g. 2007-12-06T10:32:43.141-08:00
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Util.AmazonSimpleDBUtil.EncodeZeroPadding(System.Int32,System.Int32)">
            <summary>
            Encodes positive integer value into a string by zero-padding it up to the specified number of digits.
            </summary>
            <remarks>
            For example, the integer 123 encoded with a 6 digit maximum would be represented as 000123
            </remarks>
            <param name="number">positive integer to be encoded</param>
            <param name="maxNumDigits">maximum number of digits in the largest value in the data set</param>
            <returns>A string representation of the zero-padded integer</returns>
        </member>
        <member name="M:Amazon.SimpleDB.Util.AmazonSimpleDBUtil.EncodeZeroPadding(System.Single,System.Int32)">
             <summary>
             Encodes positive single-precision floating point value into a string by zero-padding it to the specified number of digits.
             </summary>
             <remarks>
             This function only zero-pads digits to the left of the decimal point.
            
             For example, the value 123.456 encoded with a 6 digit maximum would be represented as 000123.456
             </remarks>
             <param name="number">positive floating point value to be encoded</param>
             <param name="maxNumDigits">maximum number of digits in the largest value in the data set</param>
             <returns>A string representation of the zero-padded floating point value</returns>
        </member>
        <member name="M:Amazon.SimpleDB.Util.AmazonSimpleDBUtil.EncodeRealNumberRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Encodes real integer value into a string by offsetting and zero-padding
            number up to the specified number of digits.  Use this encoding method if the data
            range set includes both positive and negative values.
            </summary>
            <remarks>
            For example, the integer value -123 offset by 1000 with a maximum of 6 digits would be:
            -123 + 1000, padded to 6 digits: 000877
            </remarks>
            <param name="number">integer to be encoded</param>
            <param name="maxNumDigits">maximum number of digits in the largest absolute value in the data set</param>
            <param name="offsetValue">offset value, has to be greater than absolute value of any negative number in the data set.</param>
            <returns>A string representation of the integer</returns>
        </member>
        <member name="M:Amazon.SimpleDB.Util.AmazonSimpleDBUtil.EncodeRealNumberRange(System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
            Encodes real float value into a string by offsetting and zero-padding
            number up to the specified number of digits.  Use this encoding method if the data
            range set includes both positive and negative values.
            </summary>
            <remarks>
            For example, the floating point value -123.456 offset by 1000 with
            a maximum of 6 digits to the left, and 4 to the right would be:
            0008765440
            </remarks>
            <param name="number">floating point value to be encoded</param>
            <param name="maxDigitsLeft">maximum number of digits left of the decimal point in the largest absolute value in the data set</param>
            <param name="maxDigitsRight">maximum number of digits right of the decimal point in the largest absolute value in the data set, i.e. precision</param>
            <param name="offsetValue">offset value, has to be greater than absolute value of any negative number in the data set.</param>
            <returns>A string representation of the integer</returns>
        </member>
        <member name="M:Amazon.SimpleDB.Util.AmazonSimpleDBUtil.DecodeZeroPaddingFloat(System.String)">
            <summary>
            Decodes zero-padded positive float value from the string representation
            </summary>
            <param name="value">zero-padded string representation of the float value</param>
            <returns>original float value</returns>
        </member>
        <member name="M:Amazon.SimpleDB.Util.AmazonSimpleDBUtil.DecodeZeroPaddingInt(System.String)">
            <summary>
            Decodes zero-padded positive integer value from the string representation
            </summary>
            <param name="value">zero-padded string representation of the integer</param>
            <returns>original integer value</returns>
        </member>
        <member name="M:Amazon.SimpleDB.Util.AmazonSimpleDBUtil.DecodeRealNumberRangeInt(System.String,System.Int32)">
            <summary>
            Decodes float value from the string representation that was created by using encodeRealNumberRange(..) function.
            </summary>
            <param name="value">string representation of the integer value</param>
            <param name="offsetValue">offset value that was used in the original encoding</param>
            <returns>original integer value</returns>
        </member>
        <member name="M:Amazon.SimpleDB.Util.AmazonSimpleDBUtil.DecodeRealNumberRangeFloat(System.String,System.Int32,System.Int32)">
            <summary>
            Decodes float value from the string representation that was created by using encodeRealNumberRange(..) function.
            </summary>
            <param name="value">string representation of the integer value</param>
            <param name="maxDigitsRight">maximum number of digits left of the decimal point in the largest absolute
            value in the data set (must be the same as the one used for encoding).</param>
            <param name="offsetValue">offset value that was used in the original encoding</param>
            <returns>original float value</returns>
        </member>
        <member name="M:Amazon.SimpleDB.Util.AmazonSimpleDBUtil.EncodeDate(System.DateTime)">
            <summary>
            Encodes date value into string format that can be compared lexicographically
            </summary>
            <param name="date">date value to be encoded</param>
            <returns>string representation of the date value</returns>
        </member>
        <member name="M:Amazon.SimpleDB.Util.AmazonSimpleDBUtil.DecodeDate(System.String)">
            <summary>
            Decodes date value from the string representation created using encodeDate(..) function.
            </summary>
            <param name="value">string representation of the date value</param>
            <returns>original date value</returns>
        </member>
        <member name="P:Amazon.SimpleDB.Util.AmazonSimpleDBUtil.FormattedCurrentTimestamp">
            <summary>
            Gets the Current Date as an ISO8601 formatted Timestamp
            </summary>
            <returns>ISO8601 formatted current timestamp String</returns>
        </member>
        <member name="M:Amazon.SimpleDB.Util.AmazonSimpleDBUtil.DecodeAttribute(Amazon.SimpleDB.Model.Attribute)">
            <summary>
            Decodes the base64 encoded properties of the Attribute.
            The Name and/or Value properties of an Attribute can be base64 encoded.
            </summary>
            <param name="inputAttribute">The properties of this Attribute will be decoded</param>
            <seealso cref="P:Amazon.SimpleDB.Model.Attribute.NameEncoding" />
            <seealso cref="P:Amazon.SimpleDB.Model.Attribute.ValueEncoding" />
        </member>
        <member name="M:Amazon.SimpleDB.Util.AmazonSimpleDBUtil.DecodeAttributes(System.Collections.Generic.List{Amazon.SimpleDB.Model.Attribute})">
            <summary>
            Decodes the base64 properties of every SimpleDB Attribute specified in
            list of attributes specified as input.
            </summary>
            <param name="attributes">The Attributes in this list will be decoded</param>
            <seealso cref="P:Amazon.SimpleDB.Model.Attribute.NameEncoding" />
            <seealso cref="P:Amazon.SimpleDB.Model.Attribute.ValueEncoding" />
            <seealso cref="P:Amazon.SimpleDB.Util.AmazonSimpleDBUtil.DecodeAttribute" />
        </member>
        <member name="M:Amazon.SimpleDB.Util.AmazonSimpleDBUtil.DecodeItem(Amazon.SimpleDB.Model.Item)">
            <summary>
            Decodes the base64 encoded members of the Item if necessary.
            The Name property of an Item can be base64 encoded.
            This method also decodes any encoded properties of the Attributes
            associated with the Input Item.
            </summary>
            <param name="inputItem">The Item to be decoded</param>
            <seealso cref="P:Amazon.SimpleDB.Model.Item.NameEncoding" />
            <seealso cref="P:Amazon.SimpleDB.Util.AmazonSimpleDBUtil.DecodeAttributes" />
        </member>
        <member name="M:Amazon.SimpleDB.Util.AmazonSimpleDBUtil.DecodeItems(System.Collections.Generic.List{Amazon.SimpleDB.Model.Item})">
            <summary>
            Decodes the base64 encoded members of the Item List.
            </summary>
            <param name="inputItems">The Item List to be decoded</param>
            <seealso cref="P:Amazon.SimpleDB.Model.Item.NameEncoding" />
            <seealso cref="P:Amazon.SimpleDB.Util.AmazonSimpleDBUtil.DecodeAttributes" />
            <seealso cref="P:Amazon.SimpleDB.Util.AmazonSimpleDBUtil.DecodeItem" />
        </member>
        <member name="M:Amazon.SimpleDB.Util.AmazonSimpleDBUtil.DecodeBase64String(System.String)">
            <summary>
            Returns the Base64 decoded version of the input string.
            </summary>
            <param name="encoded">The Base64 encoded string</param>
            <returns>Decoded version of the Base64 input string</returns>
        </member>
        <member name="T:Amazon.SimpleDB.AmazonSimpleDBConfig">
            <summary>
            Configuration for accessing Amazon SimpleDB service
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBConfig.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.AmazonSimpleDBConfig.RegionEndpointServiceName">
            <summary>
            The constant used to lookup in the region hash the endpoint.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.AmazonSimpleDBConfig.ServiceVersion">
            <summary>
            Gets the ServiceVersion property.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.AmazonSimpleDBConfig.UserAgent">
            <summary>
            Gets the value of UserAgent property.
            </summary>
        </member>
        <member name="T:Amazon.SimpleDB.AmazonSimpleDBException">
            <summary>
             Common exception for the SimpleDB service.
             </summary>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBException.#ctor(System.String)">
            <summary>
            Construct instance of AmazonSimpleDBException
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of AmazonSimpleDBException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBException.#ctor(System.Exception)">
            <summary>
            Construct instance of AmazonSimpleDBException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of AmazonSimpleDBException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of AmazonSimpleDBException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the AmazonSimpleDBException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Amazon.SimpleDB.AmazonSimpleDBRequest">
            <summary>
            Base class for SimpleDB operation requests.
            </summary>
        </member>
        <member name="T:Amazon.SimpleDB.Model.Attribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.Attribute.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.Attribute.#ctor(System.String,System.String)">
            <summary>
            Instantiates Attribute with the parameterized properties
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.Attribute.AlternateNameEncoding">
            <summary>
            Gets and sets the property AlternateNameEncoding. 
            <para>
            
            </para>
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.Attribute.AlternateValueEncoding">
            <summary>
            Gets and sets the property AlternateValueEncoding. 
            <para>
            
            </para>
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.Attribute.Name">
            <summary>
            Gets and sets the property Name. The name of the attribute.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.Attribute.Value">
            <summary>
            Gets and sets the property Value. The value of the attribute.
            </summary>
        </member>
        <member name="T:Amazon.SimpleDB.Model.AttributeDoesNotExistException">
            <summary>
             SimpleDB exception
             </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.AttributeDoesNotExistException.#ctor(System.String)">
            <summary>
            Constructs a new AttributeDoesNotExistException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.AttributeDoesNotExistException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of AttributeDoesNotExistException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.AttributeDoesNotExistException.#ctor(System.Exception)">
            <summary>
            Construct instance of AttributeDoesNotExistException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.AttributeDoesNotExistException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of AttributeDoesNotExistException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.AttributeDoesNotExistException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of AttributeDoesNotExistException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.AttributeDoesNotExistException.BoxUsage">
            <summary>
            Gets and sets the BoxUsage property.
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.AttributeDoesNotExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the AttributeDoesNotExistException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.SimpleDB.Model.AttributeDoesNotExistException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.SimpleDB.Model.BatchDeleteAttributesRequest">
            <summary>
            Container for the parameters to the BatchDeleteAttributes operation.
            Performs multiple DeleteAttributes operations in a single call, which reduces round
            trips and latencies. This enables Amazon SimpleDB to optimize requests, which generally
            yields better throughput. 
            
             
            <para>
             The following limitations are enforced for this operation: <ul> <li>1 MB request
            size</li> <li>25 item limit per BatchDeleteAttributes operation</li> </ul> 
            </para>
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.BatchDeleteAttributesRequest.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.BatchDeleteAttributesRequest.#ctor(System.String,System.Collections.Generic.List{Amazon.SimpleDB.Model.DeletableItem})">
            <summary>
            Instantiates BatchDeleteAttributesRequest with the parameterized properties
            </summary>
            <param name="domainName">The name of the domain in which the attributes are being deleted.</param>
            <param name="items">A list of items on which to perform the operation.</param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.BatchDeleteAttributesRequest.DomainName">
            <summary>
            Gets and sets the property DomainName. The name of the domain in which the attributes
            are being deleted.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.BatchDeleteAttributesRequest.Items">
            <summary>
            Gets and sets the property Items. A list of items on which to perform the operation.
            </summary>
        </member>
        <member name="T:Amazon.SimpleDB.Model.BatchDeleteAttributesResponse">
            <summary>
            This is the response object from the BatchDeleteAttributes operation.
            </summary>
        </member>
        <member name="T:Amazon.SimpleDB.Model.BatchPutAttributesRequest">
            <summary>
            Container for the parameters to the BatchPutAttributes operation.
            The <code>BatchPutAttributes</code> operation creates or replaces attributes within
            one or more items. By using this operation, the client can perform multiple <a>PutAttribute</a>
            operation with a single call. This helps yield savings in round trips and latencies,
            enabling Amazon SimpleDB to optimize requests and generally produce better throughput.
            
            
             
            <para>
             The client may specify the item name with the <code>Item.X.ItemName</code> parameter.
            The client may specify new attributes using a combination of the <code>Item.X.Attribute.Y.Name</code>
            and <code>Item.X.Attribute.Y.Value</code> parameters. The client may specify the first
            attribute for the first item using the parameters <code>Item.0.Attribute.0.Name</code>
            and <code>Item.0.Attribute.0.Value</code>, and for the second attribute for the first
            item by the parameters <code>Item.0.Attribute.1.Name</code> and <code>Item.0.Attribute.1.Value</code>,
            and so on. 
            </para>
             
            <para>
             Attributes are uniquely identified within an item by their name/value combination.
            For example, a single item can have the attributes <code>{ "first_name", "first_value"
            }</code> and <code>{ "first_name", "second_value" }</code>. However, it cannot have
            two attribute instances where both the <code>Item.X.Attribute.Y.Name</code> and <code>Item.X.Attribute.Y.Value</code>
            are the same. 
            </para>
             
            <para>
             Optionally, the requester can supply the <code>Replace</code> parameter for each
            individual value. Setting this value to <code>true</code> will cause the new attribute
            values to replace the existing attribute values. For example, if an item <code>I</code>
            has the attributes <code>{ 'a', '1' }, { 'b', '2'}</code> and <code>{ 'b', '3' }</code>
            and the requester does a BatchPutAttributes of <code>{'I', 'b', '4' }</code> with
            the Replace parameter set to true, the final attributes of the item will be <code>{
            'a', '1' }</code> and <code>{ 'b', '4' }</code>, replacing the previous values of
            the 'b' attribute with the new value. 
            </para>
             <important> This operation is vulnerable to exceeding the maximum URL size when making
            a REST request using the HTTP GET method. This operation does not support conditions
            using <code>Expected.X.Name</code>, <code>Expected.X.Value</code>, or <code>Expected.X.Exists</code>.
            </important> 
            <para>
             You can execute multiple <code>BatchPutAttributes</code> operations and other operations
            in parallel. However, large numbers of concurrent <code>BatchPutAttributes</code>
            calls can result in Service Unavailable (503) responses. 
            </para>
             
            <para>
             The following limitations are enforced for this operation: <ul> <li>256 attribute
            name-value pairs per item</li> <li>1 MB request size</li> <li>1 billion attributes
            per domain</li> <li>10 GB of total user data storage per domain</li> <li>25 item limit
            per <code>BatchPutAttributes</code> operation</li> </ul> 
            </para>
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.BatchPutAttributesRequest.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.BatchPutAttributesRequest.#ctor(System.String,System.Collections.Generic.List{Amazon.SimpleDB.Model.ReplaceableItem})">
            <summary>
            Instantiates BatchPutAttributesRequest with the parameterized properties
            </summary>
            <param name="domainName">The name of the domain in which the attributes are being stored.</param>
            <param name="items">A list of items on which to perform the operation.</param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.BatchPutAttributesRequest.DomainName">
            <summary>
            Gets and sets the property DomainName. The name of the domain in which the attributes
            are being stored.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.BatchPutAttributesRequest.Items">
            <summary>
            Gets and sets the property Items. A list of items on which to perform the operation.
            </summary>
        </member>
        <member name="T:Amazon.SimpleDB.Model.BatchPutAttributesResponse">
            <summary>
            This is the response object from the BatchPutAttributes operation.
            </summary>
        </member>
        <member name="T:Amazon.SimpleDB.Model.CreateDomainRequest">
            <summary>
            Container for the parameters to the CreateDomain operation.
            The <code>CreateDomain</code> operation creates a new domain. The domain name should
            be unique among the domains associated with the Access Key ID provided in the request.
            The <code>CreateDomain</code> operation may take 10 or more seconds to complete. 
            
             
            <para>
             The client can create up to 100 domains per account. 
            </para>
             
            <para>
             If the client requires additional domains, go to <a href="http://aws.amazon.com/contact-us/simpledb-limit-request/">
            http://aws.amazon.com/contact-us/simpledb-limit-request/</a>. 
            </para>
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.CreateDomainRequest.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.CreateDomainRequest.#ctor(System.String)">
            <summary>
            Instantiates CreateDomainRequest with the parameterized properties
            </summary>
            <param name="domainName">The name of the domain to create. The name can range between 3 and 255 characters and can contain the following characters: a-z, A-Z, 0-9, '_', '-', and '.'.</param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.CreateDomainRequest.DomainName">
            <summary>
            Gets and sets the property DomainName. The name of the domain to create. The name
            can range between 3 and 255 characters and can contain the following characters: a-z,
            A-Z, 0-9, '_', '-', and '.'.
            </summary>
        </member>
        <member name="T:Amazon.SimpleDB.Model.CreateDomainResponse">
            <summary>
            This is the response object from the CreateDomain operation.
            </summary>
        </member>
        <member name="T:Amazon.SimpleDB.Model.DeletableItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.DeletableItem.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.DeletableItem.#ctor(System.String,System.Collections.Generic.List{Amazon.SimpleDB.Model.Attribute})">
            <summary>
            Instantiates DeletableItem with the parameterized properties
            </summary>
            <param name="name">Sets the DeletableItem Name property</param>
            <param name="attributes">Sets the DeletableItem Attributes property</param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.DeletableItem.Attributes">
            <summary>
            Gets and sets the property Attributes.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.DeletableItem.Name">
            <summary>
            Gets and sets the property Name.
            </summary>
        </member>
        <member name="T:Amazon.SimpleDB.Model.DeleteAttributesRequest">
            <summary>
            Container for the parameters to the DeleteAttributes operation.
            Deletes one or more attributes associated with an item. If all attributes of the
            item are deleted, the item is deleted. 
            
             
            <para>
             <code>DeleteAttributes</code> is an idempotent operation; running it multiple times
            on the same item or attribute does not result in an error response. 
            </para>
             
            <para>
             Because Amazon SimpleDB makes multiple copies of item data and uses an eventual consistency
            update model, performing a <a>GetAttributes</a> or <a>Select</a> operation (read)
            immediately after a <code>DeleteAttributes</code> or <a>PutAttributes</a> operation
            (write) might not return updated item data. 
            </para>
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.DeleteAttributesRequest.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.DeleteAttributesRequest.#ctor(System.String,System.String)">
            <summary>
            Instantiates DeleteAttributesRequest with the parameterized properties
            </summary>
            <param name="domainName">The name of the domain in which to perform the operation.</param>
            <param name="itemName">The name of the item. Similar to rows on a spreadsheet, items represent individual objects that contain one or more value-attribute pairs.</param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.DeleteAttributesRequest.#ctor(System.String,System.String,System.Collections.Generic.List{Amazon.SimpleDB.Model.Attribute})">
            <summary>
            Instantiates DeleteAttributesRequest with the parameterized properties
            </summary>
            <param name="domainName">The name of the domain in which to perform the operation.</param>
            <param name="itemName">The name of the item. Similar to rows on a spreadsheet, items represent individual objects that contain one or more value-attribute pairs.</param>
            <param name="attributes">A list of Attributes. Similar to columns on a spreadsheet, attributes represent categories of data that can be assigned to items.</param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.DeleteAttributesRequest.#ctor(System.String,System.String,System.Collections.Generic.List{Amazon.SimpleDB.Model.Attribute},Amazon.SimpleDB.Model.UpdateCondition)">
            <summary>
            Instantiates DeleteAttributesRequest with the parameterized properties
            </summary>
            <param name="domainName">The name of the domain in which to perform the operation.</param>
            <param name="itemName">The name of the item. Similar to rows on a spreadsheet, items represent individual objects that contain one or more value-attribute pairs.</param>
            <param name="attributes">A list of Attributes. Similar to columns on a spreadsheet, attributes represent categories of data that can be assigned to items.</param>
            <param name="expected">The update condition which, if specified, determines whether the specified attributes will be deleted or not. The update condition must be satisfied in order for this request to be processed and the attributes to be deleted.</param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.DeleteAttributesRequest.Attributes">
            <summary>
            Gets and sets the property Attributes. A list of Attributes. Similar to columns on
            a spreadsheet, attributes represent categories of data that can be assigned to items.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.DeleteAttributesRequest.DomainName">
            <summary>
            Gets and sets the property DomainName. The name of the domain in which to perform
            the operation.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.DeleteAttributesRequest.Expected">
            <summary>
            Gets and sets the property Expected. The update condition which, if specified, determines
            whether the specified attributes will be deleted or not. The update condition must
            be satisfied in order for this request to be processed and the attributes to be deleted.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.DeleteAttributesRequest.ItemName">
            <summary>
            Gets and sets the property ItemName. The name of the item. Similar to rows on a spreadsheet,
            items represent individual objects that contain one or more value-attribute pairs.
            </summary>
        </member>
        <member name="T:Amazon.SimpleDB.Model.DeleteAttributesResponse">
            <summary>
            This is the response object from the DeleteAttributes operation.
            </summary>
        </member>
        <member name="T:Amazon.SimpleDB.Model.DeleteDomainRequest">
            <summary>
            Container for the parameters to the DeleteDomain operation.
            The <code>DeleteDomain</code> operation deletes a domain. Any items (and their attributes)
            in the domain are deleted as well. The <code>DeleteDomain</code> operation might take
            10 or more seconds to complete.
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.DeleteDomainRequest.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.DeleteDomainRequest.#ctor(System.String)">
            <summary>
            Instantiates DeleteDomainRequest with the parameterized properties
            </summary>
            <param name="domainName">The name of the domain to delete.</param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.DeleteDomainRequest.DomainName">
            <summary>
            Gets and sets the property DomainName. The name of the domain to delete.
            </summary>
        </member>
        <member name="T:Amazon.SimpleDB.Model.DeleteDomainResponse">
            <summary>
            This is the response object from the DeleteDomain operation.
            </summary>
        </member>
        <member name="T:Amazon.SimpleDB.Model.DomainMetadataRequest">
            <summary>
            Container for the parameters to the DomainMetadata operation.
            Returns information about the domain, including when the domain was created, the
            number of items and attributes in the domain, and the size of the attribute names
            and values.
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.DomainMetadataRequest.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.DomainMetadataRequest.#ctor(System.String)">
            <summary>
            Instantiates DomainMetadataRequest with the parameterized properties
            </summary>
            <param name="domainName">The name of the domain for which to display the metadata of.</param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.DomainMetadataRequest.DomainName">
            <summary>
            Gets and sets the property DomainName. The name of the domain for which to display
            the metadata of.
            </summary>
        </member>
        <member name="T:Amazon.SimpleDB.Model.DomainMetadataResponse">
            <summary>
            This is the response object from the DomainMetadata operation.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.DomainMetadataResponse.AttributeNameCount">
            <summary>
            Gets and sets the property AttributeNameCount. The number of unique attribute names
            in the domain.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.DomainMetadataResponse.AttributeNamesSizeBytes">
            <summary>
            Gets and sets the property AttributeNamesSizeBytes. The total size of all unique attribute
            names in the domain, in bytes.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.DomainMetadataResponse.AttributeValueCount">
            <summary>
            Gets and sets the property AttributeValueCount. The number of all attribute name/value
            pairs in the domain.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.DomainMetadataResponse.AttributeValuesSizeBytes">
            <summary>
            Gets and sets the property AttributeValuesSizeBytes. The total size of all attribute
            values in the domain, in bytes.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.DomainMetadataResponse.ItemCount">
            <summary>
            Gets and sets the property ItemCount. The number of all items in the domain.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.DomainMetadataResponse.ItemNamesSizeBytes">
            <summary>
            Gets and sets the property ItemNamesSizeBytes. The total size of all item names in
            the domain, in bytes.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.DomainMetadataResponse.Timestamp">
            <summary>
            Gets and sets the property Timestamp. The data and time when metadata was calculated,
            in Epoch (UNIX) seconds.
            </summary>
        </member>
        <member name="T:Amazon.SimpleDB.Model.DuplicateItemNameException">
            <summary>
             SimpleDB exception
             </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.DuplicateItemNameException.#ctor(System.String)">
            <summary>
            Constructs a new DuplicateItemNameException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.DuplicateItemNameException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of DuplicateItemNameException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.DuplicateItemNameException.#ctor(System.Exception)">
            <summary>
            Construct instance of DuplicateItemNameException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.DuplicateItemNameException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of DuplicateItemNameException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.DuplicateItemNameException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of DuplicateItemNameException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.DuplicateItemNameException.BoxUsage">
            <summary>
            Gets and sets the BoxUsage property.
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.DuplicateItemNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the DuplicateItemNameException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.SimpleDB.Model.DuplicateItemNameException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.SimpleDB.Model.GetAttributesRequest">
            <summary>
            Container for the parameters to the GetAttributes operation.
            Returns all of the attributes associated with the specified item. Optionally, the
            attributes returned can be limited to one or more attributes by specifying an attribute
            name parameter. 
            
             
            <para>
             If the item does not exist on the replica that was accessed for this operation, an
            empty set is returned. The system does not return an error as it cannot guarantee
            the item does not exist on other replicas. 
            </para>
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.GetAttributesRequest.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.GetAttributesRequest.#ctor(System.String,System.String)">
            <summary>
            Instantiates GetAttributesRequest with the parameterized properties
            </summary>
            <param name="domainName">The name of the domain in which to perform the operation.</param>
            <param name="itemName">The name of the item.</param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.GetAttributesRequest.AttributeNames">
            <summary>
            Gets and sets the property AttributeNames. The names of the attributes.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.GetAttributesRequest.ConsistentRead">
            <summary>
            Gets and sets the property ConsistentRead. Determines whether or not strong consistency
            should be enforced when data is read from SimpleDB. If <code>true</code>, any data
            previously written to SimpleDB will be returned. Otherwise, results will be consistent
            eventually, and the client may not see data that was written immediately before your
            read.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.GetAttributesRequest.DomainName">
            <summary>
            Gets and sets the property DomainName. The name of the domain in which to perform
            the operation.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.GetAttributesRequest.ItemName">
            <summary>
            Gets and sets the property ItemName. The name of the item.
            </summary>
        </member>
        <member name="T:Amazon.SimpleDB.Model.GetAttributesResponse">
            <summary>
            This is the response object from the GetAttributes operation.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.GetAttributesResponse.Attributes">
            <summary>
            Gets and sets the property Attributes. The list of attributes returned by the operation.
            </summary>
        </member>
        <member name="T:Amazon.SimpleDB.Model.InvalidNextTokenException">
            <summary>
             SimpleDB exception
             </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidNextTokenException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidNextTokenException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidNextTokenException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidNextTokenException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidNextTokenException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidNextTokenException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidNextTokenException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidNextTokenException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidNextTokenException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidNextTokenException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.InvalidNextTokenException.BoxUsage">
            <summary>
            Gets and sets the BoxUsage property.
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidNextTokenException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the InvalidNextTokenException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidNextTokenException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.SimpleDB.Model.InvalidNumberPredicatesException">
            <summary>
             SimpleDB exception
             </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidNumberPredicatesException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidNumberPredicatesException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidNumberPredicatesException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidNumberPredicatesException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidNumberPredicatesException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidNumberPredicatesException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidNumberPredicatesException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidNumberPredicatesException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidNumberPredicatesException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidNumberPredicatesException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.InvalidNumberPredicatesException.BoxUsage">
            <summary>
            Gets and sets the BoxUsage property.
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidNumberPredicatesException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the InvalidNumberPredicatesException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidNumberPredicatesException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.SimpleDB.Model.InvalidNumberValueTestsException">
            <summary>
             SimpleDB exception
             </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidNumberValueTestsException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidNumberValueTestsException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidNumberValueTestsException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidNumberValueTestsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidNumberValueTestsException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidNumberValueTestsException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidNumberValueTestsException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidNumberValueTestsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidNumberValueTestsException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidNumberValueTestsException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.InvalidNumberValueTestsException.BoxUsage">
            <summary>
            Gets and sets the BoxUsage property.
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidNumberValueTestsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the InvalidNumberValueTestsException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidNumberValueTestsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.SimpleDB.Model.InvalidParameterValueException">
            <summary>
             SimpleDB exception
             </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidParameterValueException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidParameterValueException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidParameterValueException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidParameterValueException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidParameterValueException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidParameterValueException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidParameterValueException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidParameterValueException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidParameterValueException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidParameterValueException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.InvalidParameterValueException.BoxUsage">
            <summary>
            Gets and sets the BoxUsage property.
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidParameterValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the InvalidParameterValueException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidParameterValueException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.SimpleDB.Model.InvalidQueryExpressionException">
            <summary>
             SimpleDB exception
             </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidQueryExpressionException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidQueryExpressionException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidQueryExpressionException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidQueryExpressionException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidQueryExpressionException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidQueryExpressionException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidQueryExpressionException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidQueryExpressionException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidQueryExpressionException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidQueryExpressionException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.InvalidQueryExpressionException.BoxUsage">
            <summary>
            Gets and sets the BoxUsage property.
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidQueryExpressionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the InvalidQueryExpressionException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.SimpleDB.Model.InvalidQueryExpressionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.SimpleDB.Model.Item">
            <summary>
            
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.Item.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.Item.#ctor(System.String,System.Collections.Generic.List{Amazon.SimpleDB.Model.Attribute})">
            <summary>
            Instantiates Item with the parameterized properties
            </summary>
            <param name="name">The name of the item.</param>
            <param name="attributes">A list of attributes.</param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.Item.AlternateNameEncoding">
            <summary>
            Gets and sets the property AlternateNameEncoding. 
            <para>
            
            </para>
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.Item.Attributes">
            <summary>
            Gets and sets the property Attributes. A list of attributes.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.Item.Name">
            <summary>
            Gets and sets the property Name. The name of the item.
            </summary>
        </member>
        <member name="T:Amazon.SimpleDB.Model.ListDomainsRequest">
            <summary>
            Container for the parameters to the ListDomains operation.
            The <code>ListDomains</code> operation lists all domains associated with the Access
            Key ID. It returns domain names up to the limit set by <a href="#MaxNumberOfDomains">MaxNumberOfDomains</a>.
            A <a href="#NextToken">NextToken</a> is returned if there are more than <code>MaxNumberOfDomains</code>
            domains. Calling <code>ListDomains</code> successive times with the <code>NextToken</code>
            provided by the operation returns up to <code>MaxNumberOfDomains</code> more domain
            names with each successive operation call.
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.ListDomainsRequest.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.ListDomainsRequest.MaxNumberOfDomains">
            <summary>
            Gets and sets the property MaxNumberOfDomains. The maximum number of domain names
            you want returned. The range is 1 to 100. The default setting is 100.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.ListDomainsRequest.NextToken">
            <summary>
            Gets and sets the property NextToken. A string informing Amazon SimpleDB where to
            start the next list of domain names.
            </summary>
        </member>
        <member name="T:Amazon.SimpleDB.Model.ListDomainsResponse">
            <summary>
            This is the response object from the ListDomains operation.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.ListDomainsResponse.DomainNames">
            <summary>
            Gets and sets the property DomainNames. A list of domain names that match the expression.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.ListDomainsResponse.NextToken">
            <summary>
            Gets and sets the property NextToken. An opaque token indicating that there are more
            domains than the specified <code>MaxNumberOfDomains</code> still available.
            </summary>
        </member>
        <member name="T:Amazon.SimpleDB.Model.MissingParameterException">
            <summary>
             SimpleDB exception
             </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.MissingParameterException.#ctor(System.String)">
            <summary>
            Constructs a new MissingParameterException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.MissingParameterException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of MissingParameterException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.MissingParameterException.#ctor(System.Exception)">
            <summary>
            Construct instance of MissingParameterException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.MissingParameterException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of MissingParameterException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.MissingParameterException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of MissingParameterException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.MissingParameterException.BoxUsage">
            <summary>
            Gets and sets the BoxUsage property.
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.MissingParameterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the MissingParameterException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.SimpleDB.Model.MissingParameterException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.SimpleDB.Model.NoSuchDomainException">
            <summary>
             SimpleDB exception
             </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NoSuchDomainException.#ctor(System.String)">
            <summary>
            Constructs a new NoSuchDomainException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NoSuchDomainException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of NoSuchDomainException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NoSuchDomainException.#ctor(System.Exception)">
            <summary>
            Construct instance of NoSuchDomainException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NoSuchDomainException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of NoSuchDomainException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NoSuchDomainException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of NoSuchDomainException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.NoSuchDomainException.BoxUsage">
            <summary>
            Gets and sets the BoxUsage property.
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NoSuchDomainException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the NoSuchDomainException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NoSuchDomainException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.SimpleDB.Model.NumberDomainAttributesExceededException">
            <summary>
             SimpleDB exception
             </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberDomainAttributesExceededException.#ctor(System.String)">
            <summary>
            Constructs a new NumberDomainAttributesExceededException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberDomainAttributesExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of NumberDomainAttributesExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberDomainAttributesExceededException.#ctor(System.Exception)">
            <summary>
            Construct instance of NumberDomainAttributesExceededException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberDomainAttributesExceededException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of NumberDomainAttributesExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberDomainAttributesExceededException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of NumberDomainAttributesExceededException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.NumberDomainAttributesExceededException.BoxUsage">
            <summary>
            Gets and sets the BoxUsage property.
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberDomainAttributesExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the NumberDomainAttributesExceededException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberDomainAttributesExceededException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.SimpleDB.Model.NumberDomainBytesExceededException">
            <summary>
             SimpleDB exception
             </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberDomainBytesExceededException.#ctor(System.String)">
            <summary>
            Constructs a new NumberDomainBytesExceededException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberDomainBytesExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of NumberDomainBytesExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberDomainBytesExceededException.#ctor(System.Exception)">
            <summary>
            Construct instance of NumberDomainBytesExceededException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberDomainBytesExceededException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of NumberDomainBytesExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberDomainBytesExceededException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of NumberDomainBytesExceededException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.NumberDomainBytesExceededException.BoxUsage">
            <summary>
            Gets and sets the BoxUsage property.
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberDomainBytesExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the NumberDomainBytesExceededException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberDomainBytesExceededException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.SimpleDB.Model.NumberDomainsExceededException">
            <summary>
             SimpleDB exception
             </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberDomainsExceededException.#ctor(System.String)">
            <summary>
            Constructs a new NumberDomainsExceededException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberDomainsExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of NumberDomainsExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberDomainsExceededException.#ctor(System.Exception)">
            <summary>
            Construct instance of NumberDomainsExceededException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberDomainsExceededException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of NumberDomainsExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberDomainsExceededException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of NumberDomainsExceededException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.NumberDomainsExceededException.BoxUsage">
            <summary>
            Gets and sets the BoxUsage property.
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberDomainsExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the NumberDomainsExceededException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberDomainsExceededException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.SimpleDB.Model.NumberItemAttributesExceededException">
            <summary>
             SimpleDB exception
             </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberItemAttributesExceededException.#ctor(System.String)">
            <summary>
            Constructs a new NumberItemAttributesExceededException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberItemAttributesExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of NumberItemAttributesExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberItemAttributesExceededException.#ctor(System.Exception)">
            <summary>
            Construct instance of NumberItemAttributesExceededException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberItemAttributesExceededException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of NumberItemAttributesExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberItemAttributesExceededException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of NumberItemAttributesExceededException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.NumberItemAttributesExceededException.BoxUsage">
            <summary>
            Gets and sets the BoxUsage property.
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberItemAttributesExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the NumberItemAttributesExceededException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberItemAttributesExceededException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.SimpleDB.Model.NumberSubmittedAttributesExceededException">
            <summary>
             SimpleDB exception
             </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberSubmittedAttributesExceededException.#ctor(System.String)">
            <summary>
            Constructs a new NumberSubmittedAttributesExceededException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberSubmittedAttributesExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of NumberSubmittedAttributesExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberSubmittedAttributesExceededException.#ctor(System.Exception)">
            <summary>
            Construct instance of NumberSubmittedAttributesExceededException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberSubmittedAttributesExceededException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of NumberSubmittedAttributesExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberSubmittedAttributesExceededException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of NumberSubmittedAttributesExceededException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.NumberSubmittedAttributesExceededException.BoxUsage">
            <summary>
            Gets and sets the BoxUsage property.
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberSubmittedAttributesExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the NumberSubmittedAttributesExceededException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberSubmittedAttributesExceededException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.SimpleDB.Model.NumberSubmittedItemsExceededException">
            <summary>
             SimpleDB exception
             </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberSubmittedItemsExceededException.#ctor(System.String)">
            <summary>
            Constructs a new NumberSubmittedItemsExceededException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberSubmittedItemsExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of NumberSubmittedItemsExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberSubmittedItemsExceededException.#ctor(System.Exception)">
            <summary>
            Construct instance of NumberSubmittedItemsExceededException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberSubmittedItemsExceededException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of NumberSubmittedItemsExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberSubmittedItemsExceededException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of NumberSubmittedItemsExceededException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.NumberSubmittedItemsExceededException.BoxUsage">
            <summary>
            Gets and sets the BoxUsage property.
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberSubmittedItemsExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the NumberSubmittedItemsExceededException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.SimpleDB.Model.NumberSubmittedItemsExceededException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.SimpleDB.Model.PutAttributesRequest">
            <summary>
            Container for the parameters to the PutAttributes operation.
            The PutAttributes operation creates or replaces attributes in an item. The client
            may specify new attributes using a combination of the <code>Attribute.X.Name</code>
            and <code>Attribute.X.Value</code> parameters. The client specifies the first attribute
            by the parameters <code>Attribute.0.Name</code> and <code>Attribute.0.Value</code>,
            the second attribute by the parameters <code>Attribute.1.Name</code> and <code>Attribute.1.Value</code>,
            and so on. 
            
             
            <para>
             Attributes are uniquely identified in an item by their name/value combination. For
            example, a single item can have the attributes <code>{ "first_name", "first_value"
            }</code> and <code>{ "first_name", second_value" }</code>. However, it cannot have
            two attribute instances where both the <code>Attribute.X.Name</code> and <code>Attribute.X.Value</code>
            are the same. 
            </para>
             
            <para>
             Optionally, the requestor can supply the <code>Replace</code> parameter for each
            individual attribute. Setting this value to <code>true</code> causes the new attribute
            value to replace the existing attribute value(s). For example, if an item has the
            attributes <code>{ 'a', '1' }</code>, <code>{ 'b', '2'}</code> and <code>{ 'b', '3'
            }</code> and the requestor calls <code>PutAttributes</code> using the attributes <code>{
            'b', '4' }</code> with the <code>Replace</code> parameter set to true, the final attributes
            of the item are changed to <code>{ 'a', '1' }</code> and <code>{ 'b', '4' }</code>,
            which replaces the previous values of the 'b' attribute with the new value. 
            </para>
             
            <para>
             You cannot specify an empty string as an attribute name. 
            </para>
             
            <para>
             Because Amazon SimpleDB makes multiple copies of client data and uses an eventual
            consistency update model, an immediate <a>GetAttributes</a> or <a>Select</a> operation
            (read) immediately after a <a>PutAttributes</a> or <a>DeleteAttributes</a> operation
            (write) might not return the updated data. 
            </para>
             
            <para>
             The following limitations are enforced for this operation: <ul> <li>256 total attribute
            name-value pairs per item</li> <li>One billion attributes per domain</li> <li>10 GB
            of total user data storage per domain</li> </ul> 
            </para>
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.PutAttributesRequest.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.PutAttributesRequest.#ctor(System.String,System.String,System.Collections.Generic.List{Amazon.SimpleDB.Model.ReplaceableAttribute})">
            <summary>
            Instantiates PutAttributesRequest with the parameterized properties
            </summary>
            <param name="domainName">The name of the domain in which to perform the operation.</param>
            <param name="itemName">The name of the item.</param>
            <param name="attributes">The list of attributes.</param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.PutAttributesRequest.#ctor(System.String,System.String,System.Collections.Generic.List{Amazon.SimpleDB.Model.ReplaceableAttribute},Amazon.SimpleDB.Model.UpdateCondition)">
            <summary>
            Instantiates PutAttributesRequest with the parameterized properties
            </summary>
            <param name="domainName">The name of the domain in which to perform the operation.</param>
            <param name="itemName">The name of the item.</param>
            <param name="attributes">The list of attributes.</param>
            <param name="expected">The update condition which, if specified, determines whether the specified attributes will be updated or not. The update condition must be satisfied in order for this request to be processed and the attributes to be updated.</param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.PutAttributesRequest.Attributes">
            <summary>
            Gets and sets the property Attributes. The list of attributes.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.PutAttributesRequest.DomainName">
            <summary>
            Gets and sets the property DomainName. The name of the domain in which to perform
            the operation.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.PutAttributesRequest.Expected">
            <summary>
            Gets and sets the property Expected. The update condition which, if specified, determines
            whether the specified attributes will be updated or not. The update condition must
            be satisfied in order for this request to be processed and the attributes to be updated.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.PutAttributesRequest.ItemName">
            <summary>
            Gets and sets the property ItemName. The name of the item.
            </summary>
        </member>
        <member name="T:Amazon.SimpleDB.Model.PutAttributesResponse">
            <summary>
            This is the response object from the PutAttributes operation.
            </summary>
        </member>
        <member name="T:Amazon.SimpleDB.Model.ReplaceableAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.ReplaceableAttribute.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.ReplaceableAttribute.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Instantiates ReplaceableAttribute with the parameterized properties
            </summary>
            <param name="name">The name of the replaceable attribute.</param>
            <param name="value">The value of the replaceable attribute.</param>
            <param name="replace">A flag specifying whether or not to replace the attribute/value pair or to add a new attribute/value pair. The default setting is <code>false</code>.</param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.ReplaceableAttribute.Name">
            <summary>
            Gets and sets the property Name. The name of the replaceable attribute.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.ReplaceableAttribute.Replace">
            <summary>
            Gets and sets the property Replace. A flag specifying whether or not to replace the
            attribute/value pair or to add a new attribute/value pair. The default setting is
            <code>false</code>.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.ReplaceableAttribute.Value">
            <summary>
            Gets and sets the property Value. The value of the replaceable attribute.
            </summary>
        </member>
        <member name="T:Amazon.SimpleDB.Model.ReplaceableItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.ReplaceableItem.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.ReplaceableItem.#ctor(System.String)">
            <summary>
            Instantiates ReplaceableItem with the parameterized properties
            </summary>
            <param name="name">The name of the replaceable item.</param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.ReplaceableItem.#ctor(System.String,System.Collections.Generic.List{Amazon.SimpleDB.Model.ReplaceableAttribute})">
            <summary>
            Instantiates ReplaceableItem with the parameterized properties
            </summary>
            <param name="name">The name of the replaceable item.</param>
            <param name="attributes">The list of attributes for a replaceable item.</param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.ReplaceableItem.Attributes">
            <summary>
            Gets and sets the property Attributes. The list of attributes for a replaceable item.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.ReplaceableItem.Name">
            <summary>
            Gets and sets the property Name. The name of the replaceable item.
            </summary>
        </member>
        <member name="T:Amazon.SimpleDB.Model.RequestTimeoutException">
            <summary>
             SimpleDB exception
             </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.RequestTimeoutException.#ctor(System.String)">
            <summary>
            Constructs a new RequestTimeoutException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.RequestTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of RequestTimeoutException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.RequestTimeoutException.#ctor(System.Exception)">
            <summary>
            Construct instance of RequestTimeoutException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.RequestTimeoutException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RequestTimeoutException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.RequestTimeoutException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RequestTimeoutException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.RequestTimeoutException.BoxUsage">
            <summary>
            Gets and sets the BoxUsage property.
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.RequestTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the RequestTimeoutException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.SimpleDB.Model.RequestTimeoutException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.SimpleDB.Model.SelectRequest">
            <summary>
            Container for the parameters to the Select operation.
            The <code>Select</code> operation returns a set of attributes for <code>ItemNames</code>
            that match the select expression. <code>Select</code> is similar to the standard SQL
            SELECT statement. 
            
             
            <para>
             The total size of the response cannot exceed 1 MB in total size. Amazon SimpleDB
            automatically adjusts the number of items returned per page to enforce this limit.
            For example, if the client asks to retrieve 2500 items, but each individual item is
            10 kB in size, the system returns 100 items and an appropriate <code>NextToken</code>
            so the client can access the next page of results. 
            </para>
             
            <para>
             For information on how to construct select expressions, see Using Select to Create
            Amazon SimpleDB Queries in the Developer Guide. 
            </para>
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.SelectRequest.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.SelectRequest.#ctor(System.String)">
            <summary>
            Instantiates SelectRequest with the parameterized properties
            </summary>
            <param name="selectExpression">The expression used to query the domain.</param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.SelectRequest.#ctor(System.String,System.Boolean)">
            <summary>
            Instantiates SelectRequest with the parameterized properties
            </summary>
            <param name="selectExpression">The expression used to query the domain.</param>
            <param name="consistentRead">Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If <code>true</code>, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read.</param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.SelectRequest.ConsistentRead">
            <summary>
            Gets and sets the property ConsistentRead. Determines whether or not strong consistency
            should be enforced when data is read from SimpleDB. If <code>true</code>, any data
            previously written to SimpleDB will be returned. Otherwise, results will be consistent
            eventually, and the client may not see data that was written immediately before your
            read.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.SelectRequest.NextToken">
            <summary>
            Gets and sets the property NextToken. A string informing Amazon SimpleDB where to
            start the next list of <code>ItemNames</code>.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.SelectRequest.SelectExpression">
            <summary>
            Gets and sets the property SelectExpression. The expression used to query the domain.
            </summary>
        </member>
        <member name="T:Amazon.SimpleDB.Model.SelectResponse">
            <summary>
            This is the response object from the Select operation.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.SelectResponse.Items">
            <summary>
            Gets and sets the property Items. A list of items that match the select expression.
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.SelectResponse.NextToken">
            <summary>
            Gets and sets the property NextToken. An opaque token indicating that more items than
            <code>MaxNumberOfItems</code> were matched, the response size exceeded 1 megabyte,
            or the execution time exceeded 5 seconds.
            </summary>
        </member>
        <member name="T:Amazon.SimpleDB.Model.TooManyRequestedAttributesException">
            <summary>
             SimpleDB exception
             </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.TooManyRequestedAttributesException.#ctor(System.String)">
            <summary>
            Constructs a new TooManyRequestedAttributesException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.TooManyRequestedAttributesException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of TooManyRequestedAttributesException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.TooManyRequestedAttributesException.#ctor(System.Exception)">
            <summary>
            Construct instance of TooManyRequestedAttributesException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.TooManyRequestedAttributesException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of TooManyRequestedAttributesException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.SimpleDB.Model.TooManyRequestedAttributesException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of TooManyRequestedAttributesException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.TooManyRequestedAttributesException.BoxUsage">
            <summary>
            Gets and sets the BoxUsage property.
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.TooManyRequestedAttributesException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the TooManyRequestedAttributesException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.SimpleDB.Model.TooManyRequestedAttributesException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.SimpleDB.Model.UpdateCondition">
            <summary>
            Specifies the conditions under which data should be updated. If an update condition
            is specified for a request, the data will only be updated if the condition is satisfied.
            For example, if an attribute with a specific name and value exists, or if a specific
            attribute doesn't exist.
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.UpdateCondition.#ctor">
            <summary>
            Empty constructor used to set  properties independently even when a simple constructor is available
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.Model.UpdateCondition.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Instantiates UpdateCondition with the parameterized properties
            </summary>
            <param name="name">The name of the attribute involved in the condition.</param>
            <param name="value">The value of an attribute. This value can only be specified when the <code>Exists</code> parameter is equal to <code>true</code>.</param>
            <param name="exists">A value specifying whether or not the specified attribute must exist with the specified value in order for the update condition to be satisfied. Specify <code>true</code> if the attribute must exist for the update condition to be satisfied. Specify <code>false</code> if the attribute should not exist in order for the update condition to be satisfied.</param>
        </member>
        <member name="P:Amazon.SimpleDB.Model.UpdateCondition.Exists">
            <summary>
            Gets and sets the property Exists. 
            <para>
            A value specifying whether or not the specified attribute must exist with the specified
            value in order for the update condition to be satisfied. Specify <code>true</code>
            if the attribute must exist for the update condition to be satisfied. Specify <code>false</code>
            if the attribute should not exist in order for the update condition to be satisfied.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.UpdateCondition.Name">
            <summary>
            Gets and sets the property Name. 
            <para>
            The name of the attribute involved in the condition.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.SimpleDB.Model.UpdateCondition.Value">
            <summary>
            Gets and sets the property Value. 
            <para>
            The value of an attribute. This value can only be specified when the <code>Exists</code>
            parameter is equal to <code>true</code>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.SimpleDB.Model.Internal.MarshallTransformations.AttributeUnmarshaller">
            <summary>
            Response Unmarshaller for Attribute Object
            </summary>  
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.AttributeUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.AttributeUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.SimpleDB.Model.Internal.MarshallTransformations.AttributeUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.SimpleDB.Model.Internal.MarshallTransformations.BatchDeleteAttributesRequestMarshaller">
            <summary>
            BatchDeleteAttributes Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.BatchDeleteAttributesRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.BatchDeleteAttributesRequestMarshaller.Marshall(Amazon.SimpleDB.Model.BatchDeleteAttributesRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.SimpleDB.Model.Internal.MarshallTransformations.BatchDeleteAttributesResponseUnmarshaller">
            <summary>
            Response Unmarshaller for BatchDeleteAttributes operation
            </summary>  
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.BatchDeleteAttributesResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.BatchDeleteAttributesResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.SimpleDB.Model.Internal.MarshallTransformations.BatchDeleteAttributesResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.SimpleDB.Model.Internal.MarshallTransformations.BatchPutAttributesRequestMarshaller">
            <summary>
            BatchPutAttributes Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.BatchPutAttributesRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.BatchPutAttributesRequestMarshaller.Marshall(Amazon.SimpleDB.Model.BatchPutAttributesRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.SimpleDB.Model.Internal.MarshallTransformations.BatchPutAttributesResponseUnmarshaller">
            <summary>
            Response Unmarshaller for BatchPutAttributes operation
            </summary>  
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.BatchPutAttributesResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.BatchPutAttributesResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.SimpleDB.Model.Internal.MarshallTransformations.BatchPutAttributesResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.SimpleDB.Model.Internal.MarshallTransformations.CreateDomainRequestMarshaller">
            <summary>
            CreateDomain Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.CreateDomainRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.CreateDomainRequestMarshaller.Marshall(Amazon.SimpleDB.Model.CreateDomainRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.SimpleDB.Model.Internal.MarshallTransformations.CreateDomainResponseUnmarshaller">
            <summary>
            Response Unmarshaller for CreateDomain operation
            </summary>  
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.CreateDomainResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.CreateDomainResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.SimpleDB.Model.Internal.MarshallTransformations.CreateDomainResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.SimpleDB.Model.Internal.MarshallTransformations.DeleteAttributesRequestMarshaller">
            <summary>
            DeleteAttributes Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.DeleteAttributesRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.DeleteAttributesRequestMarshaller.Marshall(Amazon.SimpleDB.Model.DeleteAttributesRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.SimpleDB.Model.Internal.MarshallTransformations.DeleteAttributesResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DeleteAttributes operation
            </summary>  
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.DeleteAttributesResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.DeleteAttributesResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.SimpleDB.Model.Internal.MarshallTransformations.DeleteAttributesResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.SimpleDB.Model.Internal.MarshallTransformations.DeleteDomainRequestMarshaller">
            <summary>
            DeleteDomain Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.DeleteDomainRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.DeleteDomainRequestMarshaller.Marshall(Amazon.SimpleDB.Model.DeleteDomainRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.SimpleDB.Model.Internal.MarshallTransformations.DeleteDomainResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DeleteDomain operation
            </summary>  
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.DeleteDomainResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.DeleteDomainResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.SimpleDB.Model.Internal.MarshallTransformations.DeleteDomainResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.SimpleDB.Model.Internal.MarshallTransformations.DomainMetadataRequestMarshaller">
            <summary>
            DomainMetadata Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.DomainMetadataRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.DomainMetadataRequestMarshaller.Marshall(Amazon.SimpleDB.Model.DomainMetadataRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.SimpleDB.Model.Internal.MarshallTransformations.DomainMetadataResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DomainMetadata operation
            </summary>  
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.DomainMetadataResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.DomainMetadataResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.SimpleDB.Model.Internal.MarshallTransformations.DomainMetadataResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.SimpleDB.Model.Internal.MarshallTransformations.GetAttributesRequestMarshaller">
            <summary>
            GetAttributes Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.GetAttributesRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.GetAttributesRequestMarshaller.Marshall(Amazon.SimpleDB.Model.GetAttributesRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.SimpleDB.Model.Internal.MarshallTransformations.GetAttributesResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GetAttributes operation
            </summary>  
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.GetAttributesResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.GetAttributesResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.SimpleDB.Model.Internal.MarshallTransformations.GetAttributesResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.SimpleDB.Model.Internal.MarshallTransformations.ItemUnmarshaller">
            <summary>
            Response Unmarshaller for Item Object
            </summary>  
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.ItemUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.ItemUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.SimpleDB.Model.Internal.MarshallTransformations.ItemUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.SimpleDB.Model.Internal.MarshallTransformations.ListDomainsRequestMarshaller">
            <summary>
            ListDomains Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.ListDomainsRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.ListDomainsRequestMarshaller.Marshall(Amazon.SimpleDB.Model.ListDomainsRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.SimpleDB.Model.Internal.MarshallTransformations.ListDomainsResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListDomains operation
            </summary>  
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.ListDomainsResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.ListDomainsResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.SimpleDB.Model.Internal.MarshallTransformations.ListDomainsResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.SimpleDB.Model.Internal.MarshallTransformations.PutAttributesRequestMarshaller">
            <summary>
            PutAttributes Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.PutAttributesRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.PutAttributesRequestMarshaller.Marshall(Amazon.SimpleDB.Model.PutAttributesRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.SimpleDB.Model.Internal.MarshallTransformations.PutAttributesResponseUnmarshaller">
            <summary>
            Response Unmarshaller for PutAttributes operation
            </summary>  
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.PutAttributesResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.PutAttributesResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.SimpleDB.Model.Internal.MarshallTransformations.PutAttributesResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.SimpleDB.Model.Internal.MarshallTransformations.SelectRequestMarshaller">
            <summary>
            Select Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.SelectRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.SelectRequestMarshaller.Marshall(Amazon.SimpleDB.Model.SelectRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Amazon.SimpleDB.Model.Internal.MarshallTransformations.SelectResponseUnmarshaller">
            <summary>
            Response Unmarshaller for Select operation
            </summary>  
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.SelectResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.SimpleDB.Model.Internal.MarshallTransformations.SelectResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.SimpleDB.Model.Internal.MarshallTransformations.SelectResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.SimpleDB.AmazonSimpleDBClient">
             <summary>
             Implementation for accessing SimpleDB
            
             Amazon SimpleDB is a web service providing the core database functions of data indexing
             and querying in the cloud. By offloading the time and effort associated with building
             and operating a web-scale database, SimpleDB provides developers the freedom to focus
             on application development. 
             <para>
              A traditional, clustered relational database requires a sizable upfront capital outlay,
             is complex to design, and often requires extensive and repetitive database administration.
             Amazon SimpleDB is dramatically simpler, requiring no schema, automatically indexing
             your data and providing a simple API for storage and access. This approach eliminates
             the administrative burden of data modeling, index maintenance, and performance tuning.
             Developers gain access to this functionality within Amazon's proven computing environment,
             are able to scale instantly, and pay only for what they use. 
             </para>
              
             <para>
              Visit <a href="http://aws.amazon.com/simpledb/">http://aws.amazon.com/simpledb/</a>
             for more information. 
             </para>
             </summary>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.#ctor">
             <summary>
             Constructs AmazonSimpleDBClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.#ctor(Amazon.RegionEndpoint)">
             <summary>
             Constructs AmazonSimpleDBClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
             <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.#ctor(Amazon.SimpleDB.AmazonSimpleDBConfig)">
             <summary>
             Constructs AmazonSimpleDBClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
             <param name="config">The AmazonSimpleDBClient Configuration Object</param>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.#ctor(Amazon.Runtime.AWSCredentials)">
            <summary>
            Constructs AmazonSimpleDBClient with AWS Credentials
            </summary>
            <param name="credentials">AWS Credentials</param>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.#ctor(Amazon.Runtime.AWSCredentials,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonSimpleDBClient with AWS Credentials
            </summary>
            <param name="credentials">AWS Credentials</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.#ctor(Amazon.Runtime.AWSCredentials,Amazon.SimpleDB.AmazonSimpleDBConfig)">
            <summary>
            Constructs AmazonSimpleDBClient with AWS Credentials and an
            AmazonSimpleDBClient Configuration object.
            </summary>
            <param name="credentials">AWS Credentials</param>
            <param name="clientConfig">The AmazonSimpleDBClient Configuration Object</param>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.#ctor(System.String,System.String)">
            <summary>
            Constructs AmazonSimpleDBClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.#ctor(System.String,System.String,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonSimpleDBClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.#ctor(System.String,System.String,Amazon.SimpleDB.AmazonSimpleDBConfig)">
            <summary>
            Constructs AmazonSimpleDBClient with AWS Access Key ID, AWS Secret Key and an
            AmazonSimpleDBClient Configuration object. 
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="clientConfig">The AmazonSimpleDBClient Configuration Object</param>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs AmazonSimpleDBClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.#ctor(System.String,System.String,System.String,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonSimpleDBClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.#ctor(System.String,System.String,System.String,Amazon.SimpleDB.AmazonSimpleDBConfig)">
            <summary>
            Constructs AmazonSimpleDBClient with AWS Access Key ID, AWS Secret Key and an
            AmazonSimpleDBClient Configuration object. 
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
            <param name="clientConfig">The AmazonSimpleDBClient Configuration Object</param>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.CreateSigner">
            <summary>
            Creates the signer for the service.
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.Dispose(System.Boolean)">
            <summary>
            Disposes the service client.
            </summary>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.BatchDeleteAttributes(Amazon.SimpleDB.Model.BatchDeleteAttributesRequest)">
            <summary>
            Performs multiple DeleteAttributes operations in a single call, which reduces round
            trips and latencies. This enables Amazon SimpleDB to optimize requests, which generally
            yields better throughput. 
            
             
            <para>
             The following limitations are enforced for this operation: <ul> <li>1 MB request
            size</li> <li>25 item limit per BatchDeleteAttributes operation</li> </ul> 
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchDeleteAttributes service method.</param>
            
            <returns>The response from the BatchDeleteAttributes service method, as returned by SimpleDB.</returns>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.BatchDeleteAttributesAsync(Amazon.SimpleDB.Model.BatchDeleteAttributesRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the BatchDeleteAttributes operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the BatchDeleteAttributes operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.BatchPutAttributes(Amazon.SimpleDB.Model.BatchPutAttributesRequest)">
            <summary>
            The <code>BatchPutAttributes</code> operation creates or replaces attributes within
            one or more items. By using this operation, the client can perform multiple <a>PutAttribute</a>
            operation with a single call. This helps yield savings in round trips and latencies,
            enabling Amazon SimpleDB to optimize requests and generally produce better throughput.
            
            
             
            <para>
             The client may specify the item name with the <code>Item.X.ItemName</code> parameter.
            The client may specify new attributes using a combination of the <code>Item.X.Attribute.Y.Name</code>
            and <code>Item.X.Attribute.Y.Value</code> parameters. The client may specify the first
            attribute for the first item using the parameters <code>Item.0.Attribute.0.Name</code>
            and <code>Item.0.Attribute.0.Value</code>, and for the second attribute for the first
            item by the parameters <code>Item.0.Attribute.1.Name</code> and <code>Item.0.Attribute.1.Value</code>,
            and so on. 
            </para>
             
            <para>
             Attributes are uniquely identified within an item by their name/value combination.
            For example, a single item can have the attributes <code>{ "first_name", "first_value"
            }</code> and <code>{ "first_name", "second_value" }</code>. However, it cannot have
            two attribute instances where both the <code>Item.X.Attribute.Y.Name</code> and <code>Item.X.Attribute.Y.Value</code>
            are the same. 
            </para>
             
            <para>
             Optionally, the requester can supply the <code>Replace</code> parameter for each
            individual value. Setting this value to <code>true</code> will cause the new attribute
            values to replace the existing attribute values. For example, if an item <code>I</code>
            has the attributes <code>{ 'a', '1' }, { 'b', '2'}</code> and <code>{ 'b', '3' }</code>
            and the requester does a BatchPutAttributes of <code>{'I', 'b', '4' }</code> with
            the Replace parameter set to true, the final attributes of the item will be <code>{
            'a', '1' }</code> and <code>{ 'b', '4' }</code>, replacing the previous values of
            the 'b' attribute with the new value. 
            </para>
             <important> This operation is vulnerable to exceeding the maximum URL size when making
            a REST request using the HTTP GET method. This operation does not support conditions
            using <code>Expected.X.Name</code>, <code>Expected.X.Value</code>, or <code>Expected.X.Exists</code>.
            </important> 
            <para>
             You can execute multiple <code>BatchPutAttributes</code> operations and other operations
            in parallel. However, large numbers of concurrent <code>BatchPutAttributes</code>
            calls can result in Service Unavailable (503) responses. 
            </para>
             
            <para>
             The following limitations are enforced for this operation: <ul> <li>256 attribute
            name-value pairs per item</li> <li>1 MB request size</li> <li>1 billion attributes
            per domain</li> <li>10 GB of total user data storage per domain</li> <li>25 item limit
            per <code>BatchPutAttributes</code> operation</li> </ul> 
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchPutAttributes service method.</param>
            
            <returns>The response from the BatchPutAttributes service method, as returned by SimpleDB.</returns>
            <exception cref="T:Amazon.SimpleDB.Model.DuplicateItemNameException">
            The item name was specified more than once.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidParameterValueException">
            The value for a parameter is invalid.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.MissingParameterException">
            The request must contain the specified missing parameter.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NoSuchDomainException">
            The specified domain does not exist.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NumberDomainAttributesExceededException">
            Too many attributes in this domain.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NumberDomainBytesExceededException">
            Too many bytes in this domain.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NumberItemAttributesExceededException">
            Too many attributes in this item.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NumberSubmittedAttributesExceededException">
            Too many attributes exist in a single call.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NumberSubmittedItemsExceededException">
            Too many items exist in a single call.
            </exception>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.BatchPutAttributesAsync(Amazon.SimpleDB.Model.BatchPutAttributesRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the BatchPutAttributes operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the BatchPutAttributes operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.CreateDomain(Amazon.SimpleDB.Model.CreateDomainRequest)">
            <summary>
            The <code>CreateDomain</code> operation creates a new domain. The domain name should
            be unique among the domains associated with the Access Key ID provided in the request.
            The <code>CreateDomain</code> operation may take 10 or more seconds to complete. 
            
             
            <para>
             The client can create up to 100 domains per account. 
            </para>
             
            <para>
             If the client requires additional domains, go to <a href="http://aws.amazon.com/contact-us/simpledb-limit-request/">
            http://aws.amazon.com/contact-us/simpledb-limit-request/</a>. 
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateDomain service method.</param>
            
            <returns>The response from the CreateDomain service method, as returned by SimpleDB.</returns>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidParameterValueException">
            The value for a parameter is invalid.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.MissingParameterException">
            The request must contain the specified missing parameter.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NumberDomainsExceededException">
            Too many domains exist per this account.
            </exception>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.CreateDomainAsync(Amazon.SimpleDB.Model.CreateDomainRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the CreateDomain operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the CreateDomain operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.DeleteAttributes(Amazon.SimpleDB.Model.DeleteAttributesRequest)">
            <summary>
            Deletes one or more attributes associated with an item. If all attributes of the
            item are deleted, the item is deleted. 
            
             
            <para>
             <code>DeleteAttributes</code> is an idempotent operation; running it multiple times
            on the same item or attribute does not result in an error response. 
            </para>
             
            <para>
             Because Amazon SimpleDB makes multiple copies of item data and uses an eventual consistency
            update model, performing a <a>GetAttributes</a> or <a>Select</a> operation (read)
            immediately after a <code>DeleteAttributes</code> or <a>PutAttributes</a> operation
            (write) might not return updated item data. 
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteAttributes service method.</param>
            
            <returns>The response from the DeleteAttributes service method, as returned by SimpleDB.</returns>
            <exception cref="T:Amazon.SimpleDB.Model.AttributeDoesNotExistException">
            The specified attribute does not exist.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidParameterValueException">
            The value for a parameter is invalid.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.MissingParameterException">
            The request must contain the specified missing parameter.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NoSuchDomainException">
            The specified domain does not exist.
            </exception>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.DeleteAttributesAsync(Amazon.SimpleDB.Model.DeleteAttributesRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DeleteAttributes operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DeleteAttributes operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.DeleteDomain(Amazon.SimpleDB.Model.DeleteDomainRequest)">
            <summary>
            The <code>DeleteDomain</code> operation deletes a domain. Any items (and their attributes)
            in the domain are deleted as well. The <code>DeleteDomain</code> operation might take
            10 or more seconds to complete.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteDomain service method.</param>
            
            <returns>The response from the DeleteDomain service method, as returned by SimpleDB.</returns>
            <exception cref="T:Amazon.SimpleDB.Model.MissingParameterException">
            The request must contain the specified missing parameter.
            </exception>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.DeleteDomainAsync(Amazon.SimpleDB.Model.DeleteDomainRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DeleteDomain operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DeleteDomain operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.DomainMetadata(Amazon.SimpleDB.Model.DomainMetadataRequest)">
            <summary>
            Returns information about the domain, including when the domain was created, the
            number of items and attributes in the domain, and the size of the attribute names
            and values.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DomainMetadata service method.</param>
            
            <returns>The response from the DomainMetadata service method, as returned by SimpleDB.</returns>
            <exception cref="T:Amazon.SimpleDB.Model.MissingParameterException">
            The request must contain the specified missing parameter.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NoSuchDomainException">
            The specified domain does not exist.
            </exception>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.DomainMetadataAsync(Amazon.SimpleDB.Model.DomainMetadataRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DomainMetadata operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DomainMetadata operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.GetAttributes(Amazon.SimpleDB.Model.GetAttributesRequest)">
            <summary>
            Returns all of the attributes associated with the specified item. Optionally, the
            attributes returned can be limited to one or more attributes by specifying an attribute
            name parameter. 
            
             
            <para>
             If the item does not exist on the replica that was accessed for this operation, an
            empty set is returned. The system does not return an error as it cannot guarantee
            the item does not exist on other replicas. 
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetAttributes service method.</param>
            
            <returns>The response from the GetAttributes service method, as returned by SimpleDB.</returns>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidParameterValueException">
            The value for a parameter is invalid.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.MissingParameterException">
            The request must contain the specified missing parameter.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NoSuchDomainException">
            The specified domain does not exist.
            </exception>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.GetAttributesAsync(Amazon.SimpleDB.Model.GetAttributesRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the GetAttributes operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the GetAttributes operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.ListDomains">
            <summary>
            The <code>ListDomains</code> operation lists all domains associated with the Access
            Key ID. It returns domain names up to the limit set by <a href="#MaxNumberOfDomains">MaxNumberOfDomains</a>.
            A <a href="#NextToken">NextToken</a> is returned if there are more than <code>MaxNumberOfDomains</code>
            domains. Calling <code>ListDomains</code> successive times with the <code>NextToken</code>
            provided by the operation returns up to <code>MaxNumberOfDomains</code> more domain
            names with each successive operation call.
            </summary>
            
            <returns>The response from the ListDomains service method, as returned by SimpleDB.</returns>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidNextTokenException">
            The specified NextToken is not valid.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidParameterValueException">
            The value for a parameter is invalid.
            </exception>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.ListDomains(Amazon.SimpleDB.Model.ListDomainsRequest)">
            <summary>
            The <code>ListDomains</code> operation lists all domains associated with the Access
            Key ID. It returns domain names up to the limit set by <a href="#MaxNumberOfDomains">MaxNumberOfDomains</a>.
            A <a href="#NextToken">NextToken</a> is returned if there are more than <code>MaxNumberOfDomains</code>
            domains. Calling <code>ListDomains</code> successive times with the <code>NextToken</code>
            provided by the operation returns up to <code>MaxNumberOfDomains</code> more domain
            names with each successive operation call.
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListDomains service method.</param>
            
            <returns>The response from the ListDomains service method, as returned by SimpleDB.</returns>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidNextTokenException">
            The specified NextToken is not valid.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidParameterValueException">
            The value for a parameter is invalid.
            </exception>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.ListDomainsAsync(System.Threading.CancellationToken)">
            <summary>
            The <code>ListDomains</code> operation lists all domains associated with the Access
            Key ID. It returns domain names up to the limit set by <a href="#MaxNumberOfDomains">MaxNumberOfDomains</a>.
            A <a href="#NextToken">NextToken</a> is returned if there are more than <code>MaxNumberOfDomains</code>
            domains. Calling <code>ListDomains</code> successive times with the <code>NextToken</code>
            provided by the operation returns up to <code>MaxNumberOfDomains</code> more domain
            names with each successive operation call.
            </summary>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListDomains service method, as returned by SimpleDB.</returns>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidNextTokenException">
            The specified NextToken is not valid.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidParameterValueException">
            The value for a parameter is invalid.
            </exception>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.ListDomainsAsync(Amazon.SimpleDB.Model.ListDomainsRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the ListDomains operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the ListDomains operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.PutAttributes(Amazon.SimpleDB.Model.PutAttributesRequest)">
            <summary>
            The PutAttributes operation creates or replaces attributes in an item. The client
            may specify new attributes using a combination of the <code>Attribute.X.Name</code>
            and <code>Attribute.X.Value</code> parameters. The client specifies the first attribute
            by the parameters <code>Attribute.0.Name</code> and <code>Attribute.0.Value</code>,
            the second attribute by the parameters <code>Attribute.1.Name</code> and <code>Attribute.1.Value</code>,
            and so on. 
            
             
            <para>
             Attributes are uniquely identified in an item by their name/value combination. For
            example, a single item can have the attributes <code>{ "first_name", "first_value"
            }</code> and <code>{ "first_name", second_value" }</code>. However, it cannot have
            two attribute instances where both the <code>Attribute.X.Name</code> and <code>Attribute.X.Value</code>
            are the same. 
            </para>
             
            <para>
             Optionally, the requestor can supply the <code>Replace</code> parameter for each
            individual attribute. Setting this value to <code>true</code> causes the new attribute
            value to replace the existing attribute value(s). For example, if an item has the
            attributes <code>{ 'a', '1' }</code>, <code>{ 'b', '2'}</code> and <code>{ 'b', '3'
            }</code> and the requestor calls <code>PutAttributes</code> using the attributes <code>{
            'b', '4' }</code> with the <code>Replace</code> parameter set to true, the final attributes
            of the item are changed to <code>{ 'a', '1' }</code> and <code>{ 'b', '4' }</code>,
            which replaces the previous values of the 'b' attribute with the new value. 
            </para>
             
            <para>
             You cannot specify an empty string as an attribute name. 
            </para>
             
            <para>
             Because Amazon SimpleDB makes multiple copies of client data and uses an eventual
            consistency update model, an immediate <a>GetAttributes</a> or <a>Select</a> operation
            (read) immediately after a <a>PutAttributes</a> or <a>DeleteAttributes</a> operation
            (write) might not return the updated data. 
            </para>
             
            <para>
             The following limitations are enforced for this operation: <ul> <li>256 total attribute
            name-value pairs per item</li> <li>One billion attributes per domain</li> <li>10 GB
            of total user data storage per domain</li> </ul> 
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutAttributes service method.</param>
            
            <returns>The response from the PutAttributes service method, as returned by SimpleDB.</returns>
            <exception cref="T:Amazon.SimpleDB.Model.AttributeDoesNotExistException">
            The specified attribute does not exist.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidParameterValueException">
            The value for a parameter is invalid.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.MissingParameterException">
            The request must contain the specified missing parameter.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NoSuchDomainException">
            The specified domain does not exist.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NumberDomainAttributesExceededException">
            Too many attributes in this domain.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NumberDomainBytesExceededException">
            Too many bytes in this domain.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NumberItemAttributesExceededException">
            Too many attributes in this item.
            </exception>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.PutAttributesAsync(Amazon.SimpleDB.Model.PutAttributesRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the PutAttributes operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the PutAttributes operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.Select(Amazon.SimpleDB.Model.SelectRequest)">
            <summary>
            The <code>Select</code> operation returns a set of attributes for <code>ItemNames</code>
            that match the select expression. <code>Select</code> is similar to the standard SQL
            SELECT statement. 
            
             
            <para>
             The total size of the response cannot exceed 1 MB in total size. Amazon SimpleDB
            automatically adjusts the number of items returned per page to enforce this limit.
            For example, if the client asks to retrieve 2500 items, but each individual item is
            10 kB in size, the system returns 100 items and an appropriate <code>NextToken</code>
            so the client can access the next page of results. 
            </para>
             
            <para>
             For information on how to construct select expressions, see Using Select to Create
            Amazon SimpleDB Queries in the Developer Guide. 
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the Select service method.</param>
            
            <returns>The response from the Select service method, as returned by SimpleDB.</returns>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidNextTokenException">
            The specified NextToken is not valid.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidNumberPredicatesException">
            Too many predicates exist in the query expression.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidNumberValueTestsException">
            Too many predicates exist in the query expression.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidParameterValueException">
            The value for a parameter is invalid.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidQueryExpressionException">
            The specified query expression syntax is not valid.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.MissingParameterException">
            The request must contain the specified missing parameter.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NoSuchDomainException">
            The specified domain does not exist.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.RequestTimeoutException">
            A timeout occurred when attempting to query the specified domain with specified query
            expression.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.TooManyRequestedAttributesException">
            Too many attributes requested.
            </exception>
        </member>
        <member name="M:Amazon.SimpleDB.AmazonSimpleDBClient.SelectAsync(Amazon.SimpleDB.Model.SelectRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Select operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the Select operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="T:Amazon.SimpleDB.IAmazonSimpleDB">
             <summary>
             Interface for accessing SimpleDB
            
             Amazon SimpleDB is a web service providing the core database functions of data indexing
             and querying in the cloud. By offloading the time and effort associated with building
             and operating a web-scale database, SimpleDB provides developers the freedom to focus
             on application development. 
             <para>
              A traditional, clustered relational database requires a sizable upfront capital outlay,
             is complex to design, and often requires extensive and repetitive database administration.
             Amazon SimpleDB is dramatically simpler, requiring no schema, automatically indexing
             your data and providing a simple API for storage and access. This approach eliminates
             the administrative burden of data modeling, index maintenance, and performance tuning.
             Developers gain access to this functionality within Amazon's proven computing environment,
             are able to scale instantly, and pay only for what they use. 
             </para>
              
             <para>
              Visit <a href="http://aws.amazon.com/simpledb/">http://aws.amazon.com/simpledb/</a>
             for more information. 
             </para>
             </summary>
        </member>
        <member name="M:Amazon.SimpleDB.IAmazonSimpleDB.BatchDeleteAttributes(Amazon.SimpleDB.Model.BatchDeleteAttributesRequest)">
            <summary>
            Performs multiple DeleteAttributes operations in a single call, which reduces round
            trips and latencies. This enables Amazon SimpleDB to optimize requests, which generally
            yields better throughput. 
            
             
            <para>
             The following limitations are enforced for this operation: <ul> <li>1 MB request
            size</li> <li>25 item limit per BatchDeleteAttributes operation</li> </ul> 
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchDeleteAttributes service method.</param>
            
            <returns>The response from the BatchDeleteAttributes service method, as returned by SimpleDB.</returns>
        </member>
        <member name="M:Amazon.SimpleDB.IAmazonSimpleDB.BatchDeleteAttributesAsync(Amazon.SimpleDB.Model.BatchDeleteAttributesRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the BatchDeleteAttributes operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the BatchDeleteAttributes operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Amazon.SimpleDB.IAmazonSimpleDB.BatchPutAttributes(Amazon.SimpleDB.Model.BatchPutAttributesRequest)">
            <summary>
            The <code>BatchPutAttributes</code> operation creates or replaces attributes within
            one or more items. By using this operation, the client can perform multiple <a>PutAttribute</a>
            operation with a single call. This helps yield savings in round trips and latencies,
            enabling Amazon SimpleDB to optimize requests and generally produce better throughput.
            
            
             
            <para>
             The client may specify the item name with the <code>Item.X.ItemName</code> parameter.
            The client may specify new attributes using a combination of the <code>Item.X.Attribute.Y.Name</code>
            and <code>Item.X.Attribute.Y.Value</code> parameters. The client may specify the first
            attribute for the first item using the parameters <code>Item.0.Attribute.0.Name</code>
            and <code>Item.0.Attribute.0.Value</code>, and for the second attribute for the first
            item by the parameters <code>Item.0.Attribute.1.Name</code> and <code>Item.0.Attribute.1.Value</code>,
            and so on. 
            </para>
             
            <para>
             Attributes are uniquely identified within an item by their name/value combination.
            For example, a single item can have the attributes <code>{ "first_name", "first_value"
            }</code> and <code>{ "first_name", "second_value" }</code>. However, it cannot have
            two attribute instances where both the <code>Item.X.Attribute.Y.Name</code> and <code>Item.X.Attribute.Y.Value</code>
            are the same. 
            </para>
             
            <para>
             Optionally, the requester can supply the <code>Replace</code> parameter for each
            individual value. Setting this value to <code>true</code> will cause the new attribute
            values to replace the existing attribute values. For example, if an item <code>I</code>
            has the attributes <code>{ 'a', '1' }, { 'b', '2'}</code> and <code>{ 'b', '3' }</code>
            and the requester does a BatchPutAttributes of <code>{'I', 'b', '4' }</code> with
            the Replace parameter set to true, the final attributes of the item will be <code>{
            'a', '1' }</code> and <code>{ 'b', '4' }</code>, replacing the previous values of
            the 'b' attribute with the new value. 
            </para>
             <important> This operation is vulnerable to exceeding the maximum URL size when making
            a REST request using the HTTP GET method. This operation does not support conditions
            using <code>Expected.X.Name</code>, <code>Expected.X.Value</code>, or <code>Expected.X.Exists</code>.
            </important> 
            <para>
             You can execute multiple <code>BatchPutAttributes</code> operations and other operations
            in parallel. However, large numbers of concurrent <code>BatchPutAttributes</code>
            calls can result in Service Unavailable (503) responses. 
            </para>
             
            <para>
             The following limitations are enforced for this operation: <ul> <li>256 attribute
            name-value pairs per item</li> <li>1 MB request size</li> <li>1 billion attributes
            per domain</li> <li>10 GB of total user data storage per domain</li> <li>25 item limit
            per <code>BatchPutAttributes</code> operation</li> </ul> 
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchPutAttributes service method.</param>
            
            <returns>The response from the BatchPutAttributes service method, as returned by SimpleDB.</returns>
            <exception cref="T:Amazon.SimpleDB.Model.DuplicateItemNameException">
            The item name was specified more than once.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidParameterValueException">
            The value for a parameter is invalid.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.MissingParameterException">
            The request must contain the specified missing parameter.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NoSuchDomainException">
            The specified domain does not exist.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NumberDomainAttributesExceededException">
            Too many attributes in this domain.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NumberDomainBytesExceededException">
            Too many bytes in this domain.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NumberItemAttributesExceededException">
            Too many attributes in this item.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NumberSubmittedAttributesExceededException">
            Too many attributes exist in a single call.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NumberSubmittedItemsExceededException">
            Too many items exist in a single call.
            </exception>
        </member>
        <member name="M:Amazon.SimpleDB.IAmazonSimpleDB.BatchPutAttributesAsync(Amazon.SimpleDB.Model.BatchPutAttributesRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the BatchPutAttributes operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the BatchPutAttributes operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Amazon.SimpleDB.IAmazonSimpleDB.CreateDomain(Amazon.SimpleDB.Model.CreateDomainRequest)">
            <summary>
            The <code>CreateDomain</code> operation creates a new domain. The domain name should
            be unique among the domains associated with the Access Key ID provided in the request.
            The <code>CreateDomain</code> operation may take 10 or more seconds to complete. 
            
             
            <para>
             The client can create up to 100 domains per account. 
            </para>
             
            <para>
             If the client requires additional domains, go to <a href="http://aws.amazon.com/contact-us/simpledb-limit-request/">
            http://aws.amazon.com/contact-us/simpledb-limit-request/</a>. 
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateDomain service method.</param>
            
            <returns>The response from the CreateDomain service method, as returned by SimpleDB.</returns>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidParameterValueException">
            The value for a parameter is invalid.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.MissingParameterException">
            The request must contain the specified missing parameter.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NumberDomainsExceededException">
            Too many domains exist per this account.
            </exception>
        </member>
        <member name="M:Amazon.SimpleDB.IAmazonSimpleDB.CreateDomainAsync(Amazon.SimpleDB.Model.CreateDomainRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the CreateDomain operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the CreateDomain operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Amazon.SimpleDB.IAmazonSimpleDB.DeleteAttributes(Amazon.SimpleDB.Model.DeleteAttributesRequest)">
            <summary>
            Deletes one or more attributes associated with an item. If all attributes of the
            item are deleted, the item is deleted. 
            
             
            <para>
             <code>DeleteAttributes</code> is an idempotent operation; running it multiple times
            on the same item or attribute does not result in an error response. 
            </para>
             
            <para>
             Because Amazon SimpleDB makes multiple copies of item data and uses an eventual consistency
            update model, performing a <a>GetAttributes</a> or <a>Select</a> operation (read)
            immediately after a <code>DeleteAttributes</code> or <a>PutAttributes</a> operation
            (write) might not return updated item data. 
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteAttributes service method.</param>
            
            <returns>The response from the DeleteAttributes service method, as returned by SimpleDB.</returns>
            <exception cref="T:Amazon.SimpleDB.Model.AttributeDoesNotExistException">
            The specified attribute does not exist.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidParameterValueException">
            The value for a parameter is invalid.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.MissingParameterException">
            The request must contain the specified missing parameter.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NoSuchDomainException">
            The specified domain does not exist.
            </exception>
        </member>
        <member name="M:Amazon.SimpleDB.IAmazonSimpleDB.DeleteAttributesAsync(Amazon.SimpleDB.Model.DeleteAttributesRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DeleteAttributes operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DeleteAttributes operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Amazon.SimpleDB.IAmazonSimpleDB.DeleteDomain(Amazon.SimpleDB.Model.DeleteDomainRequest)">
            <summary>
            The <code>DeleteDomain</code> operation deletes a domain. Any items (and their attributes)
            in the domain are deleted as well. The <code>DeleteDomain</code> operation might take
            10 or more seconds to complete.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteDomain service method.</param>
            
            <returns>The response from the DeleteDomain service method, as returned by SimpleDB.</returns>
            <exception cref="T:Amazon.SimpleDB.Model.MissingParameterException">
            The request must contain the specified missing parameter.
            </exception>
        </member>
        <member name="M:Amazon.SimpleDB.IAmazonSimpleDB.DeleteDomainAsync(Amazon.SimpleDB.Model.DeleteDomainRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DeleteDomain operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DeleteDomain operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Amazon.SimpleDB.IAmazonSimpleDB.DomainMetadata(Amazon.SimpleDB.Model.DomainMetadataRequest)">
            <summary>
            Returns information about the domain, including when the domain was created, the
            number of items and attributes in the domain, and the size of the attribute names
            and values.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DomainMetadata service method.</param>
            
            <returns>The response from the DomainMetadata service method, as returned by SimpleDB.</returns>
            <exception cref="T:Amazon.SimpleDB.Model.MissingParameterException">
            The request must contain the specified missing parameter.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NoSuchDomainException">
            The specified domain does not exist.
            </exception>
        </member>
        <member name="M:Amazon.SimpleDB.IAmazonSimpleDB.DomainMetadataAsync(Amazon.SimpleDB.Model.DomainMetadataRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the DomainMetadata operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the DomainMetadata operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Amazon.SimpleDB.IAmazonSimpleDB.GetAttributes(Amazon.SimpleDB.Model.GetAttributesRequest)">
            <summary>
            Returns all of the attributes associated with the specified item. Optionally, the
            attributes returned can be limited to one or more attributes by specifying an attribute
            name parameter. 
            
             
            <para>
             If the item does not exist on the replica that was accessed for this operation, an
            empty set is returned. The system does not return an error as it cannot guarantee
            the item does not exist on other replicas. 
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetAttributes service method.</param>
            
            <returns>The response from the GetAttributes service method, as returned by SimpleDB.</returns>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidParameterValueException">
            The value for a parameter is invalid.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.MissingParameterException">
            The request must contain the specified missing parameter.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NoSuchDomainException">
            The specified domain does not exist.
            </exception>
        </member>
        <member name="M:Amazon.SimpleDB.IAmazonSimpleDB.GetAttributesAsync(Amazon.SimpleDB.Model.GetAttributesRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the GetAttributes operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the GetAttributes operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Amazon.SimpleDB.IAmazonSimpleDB.ListDomains">
            <summary>
            The <code>ListDomains</code> operation lists all domains associated with the Access
            Key ID. It returns domain names up to the limit set by <a href="#MaxNumberOfDomains">MaxNumberOfDomains</a>.
            A <a href="#NextToken">NextToken</a> is returned if there are more than <code>MaxNumberOfDomains</code>
            domains. Calling <code>ListDomains</code> successive times with the <code>NextToken</code>
            provided by the operation returns up to <code>MaxNumberOfDomains</code> more domain
            names with each successive operation call.
            </summary>
            
            <returns>The response from the ListDomains service method, as returned by SimpleDB.</returns>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidNextTokenException">
            The specified NextToken is not valid.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidParameterValueException">
            The value for a parameter is invalid.
            </exception>
        </member>
        <member name="M:Amazon.SimpleDB.IAmazonSimpleDB.ListDomains(Amazon.SimpleDB.Model.ListDomainsRequest)">
            <summary>
            The <code>ListDomains</code> operation lists all domains associated with the Access
            Key ID. It returns domain names up to the limit set by <a href="#MaxNumberOfDomains">MaxNumberOfDomains</a>.
            A <a href="#NextToken">NextToken</a> is returned if there are more than <code>MaxNumberOfDomains</code>
            domains. Calling <code>ListDomains</code> successive times with the <code>NextToken</code>
            provided by the operation returns up to <code>MaxNumberOfDomains</code> more domain
            names with each successive operation call.
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListDomains service method.</param>
            
            <returns>The response from the ListDomains service method, as returned by SimpleDB.</returns>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidNextTokenException">
            The specified NextToken is not valid.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidParameterValueException">
            The value for a parameter is invalid.
            </exception>
        </member>
        <member name="M:Amazon.SimpleDB.IAmazonSimpleDB.ListDomainsAsync(System.Threading.CancellationToken)">
            <summary>
            The <code>ListDomains</code> operation lists all domains associated with the Access
            Key ID. It returns domain names up to the limit set by <a href="#MaxNumberOfDomains">MaxNumberOfDomains</a>.
            A <a href="#NextToken">NextToken</a> is returned if there are more than <code>MaxNumberOfDomains</code>
            domains. Calling <code>ListDomains</code> successive times with the <code>NextToken</code>
            provided by the operation returns up to <code>MaxNumberOfDomains</code> more domain
            names with each successive operation call.
            </summary>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListDomains service method, as returned by SimpleDB.</returns>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidNextTokenException">
            The specified NextToken is not valid.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidParameterValueException">
            The value for a parameter is invalid.
            </exception>
        </member>
        <member name="M:Amazon.SimpleDB.IAmazonSimpleDB.ListDomainsAsync(Amazon.SimpleDB.Model.ListDomainsRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the ListDomains operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the ListDomains operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Amazon.SimpleDB.IAmazonSimpleDB.PutAttributes(Amazon.SimpleDB.Model.PutAttributesRequest)">
            <summary>
            The PutAttributes operation creates or replaces attributes in an item. The client
            may specify new attributes using a combination of the <code>Attribute.X.Name</code>
            and <code>Attribute.X.Value</code> parameters. The client specifies the first attribute
            by the parameters <code>Attribute.0.Name</code> and <code>Attribute.0.Value</code>,
            the second attribute by the parameters <code>Attribute.1.Name</code> and <code>Attribute.1.Value</code>,
            and so on. 
            
             
            <para>
             Attributes are uniquely identified in an item by their name/value combination. For
            example, a single item can have the attributes <code>{ "first_name", "first_value"
            }</code> and <code>{ "first_name", second_value" }</code>. However, it cannot have
            two attribute instances where both the <code>Attribute.X.Name</code> and <code>Attribute.X.Value</code>
            are the same. 
            </para>
             
            <para>
             Optionally, the requestor can supply the <code>Replace</code> parameter for each
            individual attribute. Setting this value to <code>true</code> causes the new attribute
            value to replace the existing attribute value(s). For example, if an item has the
            attributes <code>{ 'a', '1' }</code>, <code>{ 'b', '2'}</code> and <code>{ 'b', '3'
            }</code> and the requestor calls <code>PutAttributes</code> using the attributes <code>{
            'b', '4' }</code> with the <code>Replace</code> parameter set to true, the final attributes
            of the item are changed to <code>{ 'a', '1' }</code> and <code>{ 'b', '4' }</code>,
            which replaces the previous values of the 'b' attribute with the new value. 
            </para>
             
            <para>
             You cannot specify an empty string as an attribute name. 
            </para>
             
            <para>
             Because Amazon SimpleDB makes multiple copies of client data and uses an eventual
            consistency update model, an immediate <a>GetAttributes</a> or <a>Select</a> operation
            (read) immediately after a <a>PutAttributes</a> or <a>DeleteAttributes</a> operation
            (write) might not return the updated data. 
            </para>
             
            <para>
             The following limitations are enforced for this operation: <ul> <li>256 total attribute
            name-value pairs per item</li> <li>One billion attributes per domain</li> <li>10 GB
            of total user data storage per domain</li> </ul> 
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutAttributes service method.</param>
            
            <returns>The response from the PutAttributes service method, as returned by SimpleDB.</returns>
            <exception cref="T:Amazon.SimpleDB.Model.AttributeDoesNotExistException">
            The specified attribute does not exist.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidParameterValueException">
            The value for a parameter is invalid.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.MissingParameterException">
            The request must contain the specified missing parameter.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NoSuchDomainException">
            The specified domain does not exist.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NumberDomainAttributesExceededException">
            Too many attributes in this domain.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NumberDomainBytesExceededException">
            Too many bytes in this domain.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NumberItemAttributesExceededException">
            Too many attributes in this item.
            </exception>
        </member>
        <member name="M:Amazon.SimpleDB.IAmazonSimpleDB.PutAttributesAsync(Amazon.SimpleDB.Model.PutAttributesRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the PutAttributes operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the PutAttributes operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Amazon.SimpleDB.IAmazonSimpleDB.Select(Amazon.SimpleDB.Model.SelectRequest)">
            <summary>
            The <code>Select</code> operation returns a set of attributes for <code>ItemNames</code>
            that match the select expression. <code>Select</code> is similar to the standard SQL
            SELECT statement. 
            
             
            <para>
             The total size of the response cannot exceed 1 MB in total size. Amazon SimpleDB
            automatically adjusts the number of items returned per page to enforce this limit.
            For example, if the client asks to retrieve 2500 items, but each individual item is
            10 kB in size, the system returns 100 items and an appropriate <code>NextToken</code>
            so the client can access the next page of results. 
            </para>
             
            <para>
             For information on how to construct select expressions, see Using Select to Create
            Amazon SimpleDB Queries in the Developer Guide. 
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the Select service method.</param>
            
            <returns>The response from the Select service method, as returned by SimpleDB.</returns>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidNextTokenException">
            The specified NextToken is not valid.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidNumberPredicatesException">
            Too many predicates exist in the query expression.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidNumberValueTestsException">
            Too many predicates exist in the query expression.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidParameterValueException">
            The value for a parameter is invalid.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.InvalidQueryExpressionException">
            The specified query expression syntax is not valid.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.MissingParameterException">
            The request must contain the specified missing parameter.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.NoSuchDomainException">
            The specified domain does not exist.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.RequestTimeoutException">
            A timeout occurred when attempting to query the specified domain with specified query
            expression.
            </exception>
            <exception cref="T:Amazon.SimpleDB.Model.TooManyRequestedAttributesException">
            Too many attributes requested.
            </exception>
        </member>
        <member name="M:Amazon.SimpleDB.IAmazonSimpleDB.SelectAsync(Amazon.SimpleDB.Model.SelectRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates the asynchronous execution of the Select operation.
            </summary>
            
            <param name="request">Container for the necessary parameters to execute the Select operation.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
    </members>
</doc>
